package bot

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"humo_bot/db"
	"strings"
	"time"
)

func handleLate(bot *tgbotapi.BotAPI, update tgbotapi.Update, state *UserLateState) {
	state.CurrentAction = "late"
	state.IsManualTime = false
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚è± –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è:")
	msg.ReplyMarkup = GetTimeKeyboard()
	bot.Send(msg)
}

func handleLateTime(bot *tgbotapi.BotAPI, update tgbotapi.Update, state *UserLateState) {
	minutes := parseTime(update.Message.Text)
	if minutes == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
		msg.ReplyMarkup = GetTimeKeyboard()
		bot.Send(msg)
		return
	}
	state.TempMinutes = minutes
	state.CurrentAction = "late_reason"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è:")
	msg.ReplyMarkup = GetLateReasonsKeyboard()
	bot.Send(msg)
}

func handleLateManualRequest(bot *tgbotapi.BotAPI, update tgbotapi.Update, state *UserLateState) {
	state.IsManualTime = true
	state.CurrentAction = "late_manual_time"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚è± –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45 –º–∏–Ω –∏–ª–∏ 1.5 —á–∞—Å):")
	msg.ReplyMarkup = getBackKeyboard()
	bot.Send(msg)
}

func handleLateManualTime(bot *tgbotapi.BotAPI, update tgbotapi.Update, state *UserLateState) {
	minutes, err := parseManualTime(update.Message.Text)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
	if err != nil {
		msg.Text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã:\n- 45 (–º–∏–Ω—É—Ç—ã)\n- 1.5 —á–∞—Å\n- 2 —á–∞—Å–∞"
	} else if minutes <= 0 {
		msg.Text = "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
	} else if minutes > 8*60 {
		msg.Text = "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è"
	} else {
		state.TempMinutes = minutes
		state.IsManualTime = false
		state.CurrentAction = "late_reason"
		msg.Text = fmt.Sprintf("‚è± –í—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è: %d –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–ø–æ–∑–¥–∞–Ω–∏—è!:", minutes)
		msg.ReplyMarkup = GetLateReasonsKeyboard()
	}
	bot.Send(msg)
}

func handleLateReason(bot *tgbotapi.BotAPI, update tgbotapi.Update, state *UserLateState) {
	state.TempReason = update.Message.Text
	state.CurrentAction = "late_comment"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
	msg.ReplyMarkup = getSkipBackKeyboard()
	bot.Send(msg)
}

func handleLateComment(bot *tgbotapi.BotAPI, update tgbotapi.Update, dbUser db.User, state *UserLateState) {
	if strings.ToLower(update.Message.Text) == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
		state.TempComment = ""
	} else {
		state.TempComment = update.Message.Text
	}
	now := time.Now()
	state.PendingEvent = &db.Event{
		UserID:          dbUser.ID,
		EventType:       "–û–ø–æ–∑–¥–∞–Ω–∏–µ",
		Comment:         fmt.Sprintf("%s: %s", state.TempReason, state.TempComment),
		Minutes:         &state.TempMinutes,
		DateFrom:        time.Now(),
		DateTo:          time.Now(),
		ExpectedArrival: now.Add(time.Duration(int64(state.TempMinutes)) * time.Minute),
	}
	confirmationText := fmt.Sprintf("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ:\n\n‚è± –í—Ä–µ–º—è: %d –º–∏–Ω—É—Ç\nüìù –ü—Ä–∏—á–∏–Ω–∞: %s\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s",
		state.TempMinutes, state.TempReason, state.TempComment)
	confirmMsg := tgbotapi.NewMessage(update.Message.Chat.ID, confirmationText)
	confirmMsg.ReplyMarkup = GetConfirmationInlineKeyboard()
	bot.Send(confirmMsg)
}
